# Define the paths to the JSON files
$jsonFilePath1 = 'path\to\first.json'
$jsonFilePath2 = 'path\to\second.json'
$outputFilePath = 'path\to\output.json'

# Read the JSON files and convert them to PowerShell objects
$json1 = Get-Content $jsonFilePath1 | ConvertFrom-Json
$json2 = Get-Content $jsonFilePath2 | ConvertFrom-Json

# Function to perform a left join on two arrays of objects
function Left-JoinJsonObjects {
    param (
        [PSCustomObject[]]$LeftArray,
        [PSCustomObject[]]$RightArray
    )
    $result = @()
    foreach ($leftObj in $LeftArray) {
        $joinedObj = $leftObj | Select-Object * # Clone the left object
        foreach ($rightObj in $RightArray) {
            $commonProperties = Compare-Object -ReferenceObject $leftObj.PSObject.Properties -DifferenceObject $rightObj.PSObject.Properties -IncludeEqual | Where-Object { $_.SideIndicator -eq '==' }
            foreach ($prop in $commonProperties) {
                $propertyName = $prop.InputObject.Name
                if ($leftObj.$propertyName -eq $rightObj.$propertyName) {
                    # Add properties from right object that are not in the left object
                    $rightObj.PSObject.Properties | Where-Object { $_.Name -ne $propertyName -and !$joinedObj.PSObject.Properties.Name.Contains($_.Name) } | ForEach-Object {
                        $joinedObj | Add-Member -NotePropertyName $_.Name -NotePropertyValue $_.Value
                    }
                }
            }
        }
        $result += $joinedObj
    }
    return $result
}

# Perform the left join operation
$joinedJsonArray = Left-JoinJsonObjects -LeftArray $json1 -RightArray $json2

# Save the result to a new JSON file
$joinedJsonArray | ConvertTo-Json | Set-Content -Path $outputFilePath

# Output a message indicating successful completion
Write-Host "Joined JSON data saved to $outputFilePath"
