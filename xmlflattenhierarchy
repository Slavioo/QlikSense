using System;
using System.IO;
using System.Xml.Linq;

class Program
{
    static void Main()
    {
        // Define the input folder containing XML files
        string inputFolder = @"C:\Users\halad\OneDrive\Desktop\proj\input";

        // Define the output folder where results will be saved
        string outputFolder = @"C:\Users\halad\OneDrive\Desktop\proj\output";

        // Ensure the output folder exists
        Directory.CreateDirectory(outputFolder);

        // Remove existing files in the output folder
        foreach (var existingFile in Directory.GetFiles(outputFolder))
        {
            File.Delete(existingFile);
        }

        // Process each XML file in the input folder
        foreach (var xmlFile in Directory.GetFiles(inputFolder, "*.xml"))
        {
            var fileName = Path.GetFileName(xmlFile);

            // Create a new XML document for the output
            XDocument outputXml = new XDocument(new XElement("data"));

            XElement xml = XElement.Load(xmlFile);

            // Start with hierarchicalId "1" for the root element and an empty path
            FlattenXml(xml, "1", "", outputXml.Root);

            // Save the output XML to a file
            string outputXmlFile = Path.Combine(outputFolder, $"{fileName}");
            outputXml.Save(outputXmlFile);
        }

        Console.WriteLine("XML data has been processed and saved to output.xml.");
    }

    static void FlattenXml(XElement element, string hierarchicalId, string currentPath, XElement outputXml)
    {
        currentPath += "/" + element.Name;

        // Build a string for attributes (if any) of the current element
        string attributes = "";

        // Collect attributes from ancestors that have attributes
        foreach (var ancestor in element.Ancestors())
        {
            foreach (var attribute in ancestor.Attributes())
            {
                // Prepend ancestor element name to attribute name
                attributes += $"{ancestor.Name}_{attribute.Name}={attribute.Value};";
            }
        }

        // Add attributes of the current element
        foreach (var attribute in element.Attributes())
        {
            attributes += $"{element.Name}_{attribute.Name}={attribute.Value};";
        }

        // Determine the element type
        string elementType = element.HasElements ? "Element" : "Text";

        // Create a new element for all elements
        XElement outputElement = new XElement("record",
            new XAttribute("qsaId", hierarchicalId),
            new XAttribute("qsaType", elementType),
            new XAttribute("qsaPath", currentPath.Trim('/'))
        );

        // Add the qsaAttribute attribute only if there are attributes
        if (!string.IsNullOrEmpty(attributes))
        {
            outputElement.Add(new XAttribute("qsaAttribute", attributes.TrimEnd(';')));
        }

        if (element.HasElements)
        {
            // Add the new element to the output XML
            outputXml.Add(outputElement);

            // Process child elements
            int childIndex = 1;
            foreach (var child in element.Elements())
            {
                string childHierarchicalId = $"{hierarchicalId}.{childIndex}";
                FlattenXml(child, childHierarchicalId, currentPath, outputXml);
                childIndex++;
            }
        }
        else
        {
            // Add the qsaValue attribute if the element has a text value
            if (!string.IsNullOrEmpty(element.Value))
            {
                outputElement.Add(new XAttribute("qsaValue", element.Value));
            }

            // Add the new element to the output XML
            outputXml.Add(outputElement);
        }
    }
}
