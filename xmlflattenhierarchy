using System;
using System.IO;
using System.Xml.Linq;
using System.Linq;

class Program
{
    static void Main()
    {
        // Define the input folder containing XML files
        string inputFolder = @"C:\Users\halad\OneDrive\Desktop\proj\input";

        // Define the output folder where results will be saved
        string outputFolder = @"C:\Users\halad\OneDrive\Desktop\proj\output";

        // Ensure the output folder exists
        Directory.CreateDirectory(outputFolder);

        // Remove existing files in the output folder
        foreach (var existingFile in Directory.GetFiles(outputFolder))
        {
            File.Delete(existingFile);
        }

        // Create a new XML document for the output
        XDocument outputXml = new XDocument(new XElement("data"));

        // Process each XML file in the input folder
        foreach (var xmlFile in Directory.GetFiles(inputFolder, "*.xml"))
        {
            XElement xml = XElement.Load(xmlFile);

            // Start with hierarchicalId "1" for the root element and an empty path
            FlattenXml(xml, "1", "", outputXml);
        }

        // Sort records alphabetically by qsaId
        var sortedRecords = outputXml.Root.Elements("record")
            .OrderBy(record => record.Attribute("qsaId").Value);

        // Replace existing records with sorted records
        outputXml.Root.Elements().Remove();
        outputXml.Root.Add(sortedRecords);

        // Save the output XML to a file
        string outputXmlFile = Path.Combine(outputFolder, "output.xml");
        outputXml.Save(outputXmlFile);

        Console.WriteLine("XML data has been processed, sorted, and saved to output.xml.");
    }

    static void FlattenXml(XElement element, string hierarchicalId, string currentPath, XElement outputXml)
    {
        currentPath += "/" + element.Name;

        // Build a string for attributes (if any) of the current element
        string attributes = "";
        foreach (var attribute in element.Attributes())
        {
            attributes += $"{attribute.Name}={attribute.Value} ";
        }

        // Determine the element type
        string elementType = element.HasElements ? "Element" : "Text";

        // Create a new element for all elements
        XElement outputElement = new XElement("record",
            new XAttribute("qsaId", hierarchicalId),
            new XAttribute("qsaPath", currentPath.Trim('/')),
            new XAttribute("qsaAttribute", attributes.TrimEnd()),
            new XAttribute("qsaType", elementType), // Add element type attribute
            new XAttribute("qsaValue", "") // Initialize qsaValue as empty string
        );

        if (element.HasElements)
        {
            // Process child elements
            int childIndex = 1;
            foreach (var child in element.Elements())
            {
                string childHierarchicalId = $"{hierarchicalId}.{childIndex}";
                FlattenXml(child, childHierarchicalId, currentPath, outputXml);
                childIndex++;
            }
        }
        else
        {
            // Assign a value only for text elements
            outputElement.Attribute("qsaValue").Value = element.Value.Trim();
        }

        // Add the new element to the output XML
        outputXml.Root.Add(outputElement);
    }
}
