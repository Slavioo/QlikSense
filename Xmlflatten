using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;

class Program
{
    static void Main()
    {
        // Specify the input folder containing XML files
        string inputFolderPath = @"C:\Path\To\Your\Input\Folder";

        // Specify the output folder where CSV files will be saved
        string outputFolderPath = @"C:\Path\To\Your\Output\Folder";

        // Create the output folder if it doesn't exist
        Directory.CreateDirectory(outputFolderPath);

        // Get all XML files in the input folder
        string[] xmlFiles = Directory.GetFiles(inputFolderPath, "*.xml");

        // Process each XML file
        foreach (string xmlFile in xmlFiles)
        {
            // Load the XML document from the input file
            XmlDocument xmlDoc = new XmlDocument();
            xmlDoc.Load(xmlFile);

            // Flatten the XML and create a CSV
            List<string> csvLines = FlattenXML(xmlDoc.DocumentElement);

            // Construct the output CSV file path
            string outputFilePath = Path.Combine(outputFolderPath, Path.GetFileNameWithoutExtension(xmlFile) + ".csv");

            // Write the CSV lines to the output file
            File.WriteAllLines(outputFilePath, csvLines, Encoding.UTF8);

            Console.WriteLine($"CSV saved to: {outputFilePath}");
        }
    }

    // Recursive method to flatten the XML and generate CSV lines
    static List<string> FlattenXML(XmlNode node)
    {
        var csvLines = new List<string>();

        if (node.NodeType == XmlNodeType.Element)
        {
            // If it's an element node, process its children
            foreach (XmlNode childNode in node.ChildNodes)
            {
                csvLines.AddRange(FlattenXML(childNode));
            }
        }

        string elementPath = GetElementPath(node);
        string elementValue = node.InnerText;

        // Include the element path and value in the CSV line
        csvLines.Add($"{elementPath},{elementValue}");

        return csvLines;
    }

    // Helper method to get the element path
    static string GetElementPath(XmlNode node)
    {
        List<string> pathParts = new List<string>();

        while (node != null)
        {
            if (node.NodeType == XmlNodeType.Element)
            {
                pathParts.Insert(0, node.Name);
            }
            node = node.ParentNode;
        }

        return string.Join("/", pathParts);
    }
}
