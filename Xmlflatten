using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;

class Program
{
    static void Main()
    {
        // Specify the input folder containing XML files
        string inputFolderPath = @"C:\Path\To\Your\Input\Folder";

        // Specify the output folder where the XML files will be saved
        string outputFolderPath = @"C:\Path\To\Your\Output\Folder";

        // Create the output folder if it doesn't exist
        Directory.CreateDirectory(outputFolderPath);

        // Get all XML files in the input folder
        string[] xmlFiles = Directory.GetFiles(inputFolderPath, "*.xml");

        // Process each XML file
        foreach (string xmlFile in xmlFiles)
        {
            // Load the XML document from the input file
            XmlDocument xmlDoc = new XmlDocument();
            xmlDoc.Load(xmlFile);

            // Flatten the XML and create a new XML document with flattened data
            XmlDocument flattenedXmlDoc = new XmlDocument();
            XmlElement rootElement = flattenedXmlDoc.CreateElement("root");
            flattenedXmlDoc.AppendChild(rootElement);

            // Flatten the XML and add records to the new document
            int[] idCounter = { 0 }; // Initialize the ID counter
            FlattenXML(xmlDoc.DocumentElement, rootElement, flattenedXmlDoc, idCounter);

            // Construct the output XML file path
            string outputFilePath = Path.Combine(outputFolderPath, Path.GetFileNameWithoutExtension(xmlFile) + "_flattened.xml");

            // Save the flattened XML document to the output file
            flattenedXmlDoc.Save(outputFilePath);

            Console.WriteLine($"Flattened XML saved to: {outputFilePath}");
        }
    }

    // Recursive method to flatten the XML and add records to a new XML document with IDs
    static void FlattenXML(XmlNode node, XmlElement parentElement, XmlDocument flattenedXmlDoc, int[] idCounter)
    {
        if (node.NodeType == XmlNodeType.Element)
        {
            string elementPath = GetElementPath(node);
            string elementValue = FlattenTextContent(node, idCounter);

            // Create an element with "ElementPath" and "ElementValue" attributes
            XmlElement flattenedElement = flattenedXmlDoc.CreateElement("record");
            flattenedElement.SetAttribute("ElementPath", elementPath);
            flattenedElement.SetAttribute("ElementValue", elementValue);

            // Add the flattened element to the parent element
            parentElement.AppendChild(flattenedElement);

            // Process its children
            foreach (XmlNode childNode in node.ChildNodes)
            {
                FlattenXML(childNode, flattenedElement, flattenedXmlDoc, idCounter);
            }
        }
    }

    // Helper method to flatten the text content of an element and include the ID
    static string FlattenTextContent(XmlNode node, int[] idCounter)
    {
        List<string> textContent = new List<string>();

        foreach (XmlNode childNode in node.ChildNodes)
        {
            if (childNode.NodeType == XmlNodeType.Text)
            {
                textContent.Add(childNode.InnerText.Trim());
            }
        }

        string elementValue = string.Join(" ", textContent);

        // Add the ID as part of the element value
        string elementId = GenerateID(idCounter);
        if (!string.IsNullOrWhiteSpace(elementId))
        {
            elementValue += $" (ID: {elementId})";
        }

        return elementValue;
    }

    // Helper method to get the element path
    static string GetElementPath(XmlNode node)
    {
        List<string> pathParts = new List<string>();

        while (node != null)
        {
            if (node.NodeType == XmlNodeType.Element)
            {
                pathParts.Insert(0, node.Name);
            }
            node = node.ParentNode;
        }

        return string.Join("/", pathParts);
    }

    // Helper method to generate the ID based on the current counter
    static string GenerateID(int[] idCounter)
    {
        idCounter[0]++;
        return string.Join(".", idCounter);
    }
}
