using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;

class Program
{
    static int recordId = 1; // Initialize the record id to 1 by default

    static void Main()
    {
        // Specify the input folder containing XML files
        string inputFolderPath = @"C:\Path\To\Your\Input\Folder";

        // Specify the output folder where the XML files will be saved
        string outputFolderPath = @"C:\Path\To\Your\Output\Folder";

        // Create the output folder if it doesn't exist
        Directory.CreateDirectory(outputFolderPath);

        // Get all XML files in the input folder
        string[] xmlFiles = Directory.GetFiles(inputFolderPath, "*.xml");

        // Process each XML file
        foreach (string xmlFile in xmlFiles)
        {
            // Reset the record id for each file
            recordId = 1;

            // Load the XML document from the input file
            XmlDocument xmlDoc = new XmlDocument();
            xmlDoc.Load(xmlFile);

            // Flatten the XML and create a new XML document with flattened data
            XmlDocument flattenedXmlDoc = new XmlDocument();
            XmlElement rootElement = flattenedXmlDoc.CreateElement("root");
            flattenedXmlDoc.AppendChild(rootElement);

            // Flatten the XML and add records to the new document
            FlattenXML(xmlDoc.DocumentElement, rootElement, flattenedXmlDoc);

            // Construct the output XML file path
            string outputFilePath = Path.Combine(outputFolderPath, Path.GetFileNameWithoutExtension(xmlFile) + "_flattened.xml");

            // Save the flattened XML document to the output file
            flattenedXmlDoc.Save(outputFilePath);

            Console.WriteLine($"Flattened XML saved to: {outputFilePath}");
        }
    }

    // Recursive method to flatten the XML and add records to a new XML document
    static void FlattenXML(XmlNode node, XmlElement parentElement, XmlDocument flattenedXmlDoc)
    {
        if (node.NodeType == XmlNodeType.Element)
        {
            string elementPath = GetElementPath(node);

            // Create a record for the element start tag
            XmlElement startTagElement = flattenedXmlDoc.CreateElement("record");
            startTagElement.SetAttribute("id", recordId.ToString()); // Set the record id
            startTagElement.SetAttribute("ElementPath", elementPath);
            startTagElement.SetAttribute("ElementType", "StartTag");

            // Add the element start tag record to the parent element
            parentElement.AppendChild(startTagElement);

            // Process its children
            foreach (XmlNode childNode in node.ChildNodes)
            {
                FlattenXML(childNode, parentElement, flattenedXmlDoc);
            }

            // Create a record for the element end tag
            XmlElement endTagElement = flattenedXmlDoc.CreateElement("record");
            endTagElement.SetAttribute("id", recordId.ToString()); // Set the record id
            endTagElement.SetAttribute("ElementPath", elementPath);
            endTagElement.SetAttribute("ElementType", "EndTag");

            // Add the element end tag record to the parent element
            parentElement.AppendChild(endTagElement);

            // If the element has child elements, increment the record id
            if (node.HasChildNodes && node.ChildNodes.Count > 1)
            {
                recordId++;
            }
        }
        else if (node.NodeType == XmlNodeType.Text)
        {
            // If it's a text node, create a record for the text content
            string elementPath = GetElementPath(node.ParentNode);
            string elementValue = node.InnerText.Trim();

            XmlElement textElement = flattenedXmlDoc.CreateElement("record");
            textElement.SetAttribute("id", recordId.ToString()); // Set the record id
            textElement.SetAttribute("ElementPath", elementPath);
            textElement.SetAttribute("ElementType", "Text");
            textElement.SetAttribute("ElementValue", elementValue);

            parentElement.AppendChild(textElement);
        }
    }

    // Helper method to get the element path
    static string GetElementPath(XmlNode node)
    {
        List<string> pathParts = new List<string>();

        while (node != null)
        {
            if (node.NodeType == XmlNodeType.Element)
            {
                pathParts.Insert(0, node.Name);
            }
            node = node.ParentNode;
        }

        return string.Join("/", pathParts);
    }
}
