using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;

class Program
{
    static int recordId = 1; // Initialize the record id to 1 by default

    static void Main()
    {
        // Specify the input folder containing XML files
        string inputFolderPath = @"C:\Path\To\Your\Input\Folder";

        // Specify the output folder where the XML files will be saved
        string outputFolderPath = @"C:\Path\To\Your\Output\Folder";

        // Create the output folder if it doesn't exist
        Directory.CreateDirectory(outputFolderPath);

        // Get all XML files in the input folder
        string[] xmlFiles = Directory.GetFiles(inputFolderPath, "*.xml");

        // Process each XML file
        foreach (string xmlFile in xmlFiles)
        {
            // Load the XML document from the input file
            XmlDocument xmlDoc = new XmlDocument();
            xmlDoc.Load(xmlFile);

            // Reset the record id for each file
            recordId = 1;

            // Flatten the XML and create a new XML document with flattened data
            XmlDocument flattenedXmlDoc = new XmlDocument();
            XmlElement rootElement = flattenedXmlDoc.CreateElement("root");
            flattenedXmlDoc.AppendChild(rootElement);

            // Flatten the XML and add records to the new document
            FlattenXML(xmlDoc.DocumentElement, rootElement, flattenedXmlDoc);

            // Construct the output XML file path
            string outputFilePath = Path.Combine(outputFolderPath, Path.GetFileNameWithoutExtension(xmlFile) + "_flattened.xml");

            // Save the flattened XML document to the output file
            flattenedXmlDoc.Save(outputFilePath);

            Console.WriteLine($"Flattened XML saved to: {outputFilePath}");
        }
    }

    // Recursive method to flatten the XML and add records to a new XML document
    static void FlattenXML(XmlNode node, XmlElement parentElement, XmlDocument flattenedXmlDoc)
    {
        if (node.NodeType == XmlNodeType.Element)
        {
            string elementPath = GetElementPath(node);

            // If there is more than one element with the same name, increment the record id
            if (node.ParentNode.SelectNodes(node.Name).Count > 1)
            {
                recordId++;
            }

            // Create a record element for the element start tag
            XmlElement recordElement = flattenedXmlDoc.CreateElement("record");
            parentElement.AppendChild(recordElement);

            // Create id, path, and type elements
            CreateAttributeElement("id", recordId.ToString(), recordElement);
            CreateAttributeElement("path", elementPath, recordElement);
            CreateAttributeElement("type", "StartTag", recordElement);

            // Process its children
            foreach (XmlNode childNode in node.ChildNodes)
            {
                FlattenXML(childNode, recordElement, flattenedXmlDoc);
            }

            // Create a record element for the element end tag
            XmlElement endTagElement = flattenedXmlDoc.CreateElement("record");
            parentElement.AppendChild(endTagElement);

            // Create id, path, and type elements for the end tag
            CreateAttributeElement("id", recordId.ToString(), endTagElement);
            CreateAttributeElement("path", elementPath, endTagElement);
            CreateAttributeElement("type", "EndTag", endTagElement);
        }
        else if (node.NodeType == XmlNodeType.Text)
        {
            // If it's a text node, create a record element for the text content
            string elementPath = GetElementPath(node.ParentNode);
            string elementValue = node.InnerText.Trim();

            // Create a record element for text content
            XmlElement textElement = flattenedXmlDoc.CreateElement("record");
            parentElement.AppendChild(textElement);

            // Create id, path, type, and value elements for text content
            CreateAttributeElement("id", recordId.ToString(), textElement);
            CreateAttributeElement("path", elementPath, textElement);
            CreateAttributeElement("type", "Text", textElement);
            CreateAttributeElement("value", elementValue, textElement);
        }
    }

    // Helper method to create an attribute element with the specified name and value
    static void CreateAttributeElement(string name, string value, XmlElement parentElement)
    {
        XmlElement attributeElement = parentElement.OwnerDocument.CreateElement(name);
        attributeElement.InnerText = value;
        parentElement.AppendChild(attributeElement);
    }

    // Helper method to get the element path
    static string GetElementPath(XmlNode node)
    {
        List<string> pathParts = new List<string>();

        while (node != null)
        {
            if (node.NodeType == XmlNodeType.Element)
            {
                pathParts.Insert(0, node.Name);
            }
            node = node.ParentNode;
        }

        return string.Join("/", pathParts);
    }
}
