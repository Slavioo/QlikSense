# Load the XML file
$xmlContent = [xml](Get-Content -Path "your_complex.xml")

# Initialize an empty array to store flattened data
$flatData = @()

# Hashtable to keep track of processed tags
$processedTags = @{}

# Recursive function to get all parent elements separated by full stops
function Get-AllParents($node) {
    $parents = @()

    while ($node.ParentNode -ne $null) {
        $parents = $node.ParentNode.Name + '.' + $parents
        $node = $node.ParentNode
    }

    return $parents
}

# Loop through each element in the XML
foreach ($element in $xmlContent.SelectNodes("//*")) {
    $property = $element.Name
    $value = $element.InnerText
    $parents = (Get-AllParents $element).TrimEnd('.')
    
    # Extract the MasterParent by splitting the Parents column
    $parentsArray = $parents.Split('.')
    $masterParent = $null
    if ($parentsArray.Length -gt 1) {
        $masterParent = $parentsArray[$parentsArray.Length - 2]
    }

    # Generate a unique key for the property within its hierarchy
    $key = "$parents.$property"

    # Check if the tag has already been processed with the same key
    if (-not $processedTags.ContainsKey($key)) {
        # Add the property, parents, MasterParent, and value to the flattened data
        $flatData += [PSCustomObject]@{ Parents = $parents; MasterParent = $masterParent; Property = $property; Value = $value }
        $processedTags[$key] = $true
    }
}

# Export the flattened data as a CSV file (or any desired format)
$flatData | Export-Csv -Path "flattened_data_with_master_parent.csv" -NoTypeInformation
