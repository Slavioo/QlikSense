# Load the XML file
$xmlContent = [xml](Get-Content -Path "your_complex.xml")

# Initialize an empty array to store flattened data
$flatData = @()

# Hashtable to keep track of processed tags
$processedTags = @{}

# Recursive function to get all parent elements separated by full stops
function Get-AllParents($node) {
    $parents = @()

    while ($node.ParentNode -ne $null) {
        $parents = $node.ParentNode.Name + '.' + $parents
        $node = $node.ParentNode
    }

    return $parents
}

# Loop through each element in the XML
foreach ($element in $xmlContent.SelectNodes("//*")) {
    $property = $element.Name
    $value = $element.InnerText
    $parents = (Get-AllParents $element).TrimEnd('.')
    
    # Split the parents into an array
    $parentsArray = $parents.Split('.')

    # Generate a unique key for the property within its hierarchy
    $key = "$parents.$property"

    # Check if the tag has already been processed with the same key
    if (-not $processedTags.ContainsKey($key)) {
        # Create a custom object with Property and Value columns
        $entry = New-Object -TypeName PSObject
        $entry | Add-Member -MemberType NoteProperty -Name "Property" -Value $property
        $entry | Add-Member -MemberType NoteProperty -Name "Value" -Value $value

        # Add Parent columns based on the number of levels
        for ($i = 0; $i -lt $parentsArray.Length; $i++) {
            $entry | Add-Member -MemberType NoteProperty -Name "Parent${i}level" -Value $parentsArray[$i]
        }

        # Add the custom object to the flattened data array
        $flatData += $entry

        $processedTags[$key] = $true
    }
}

# Export the flattened data as a CSV file (or any desired format)
$flatData | Export-Csv -Path "flattened_data_with_parent_levels.csv" -NoTypeInformation
