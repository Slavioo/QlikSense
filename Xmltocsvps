# Load the XML file
$xmlContent = [xml](Get-Content -Path "your_complex.xml")

# Initialize an empty array to store flattened data
$flatData = @()

# Hashtable to keep track of processed tags
$processedTags = @{}

# Function to check if an element's value is a concatenation of child values
function IsConcatenationOfChildValues($element) {
    $childValues = $element.ChildNodes | ForEach-Object { $_.InnerText }
    $combinedValue = $childValues -join ""
    return ($element.InnerText -eq $combinedValue)
}

# Recursive function to get all parent elements separated by full stops
function Get-AllParents($node) {
    $parents = @()

    while ($node.ParentNode -ne $null) {
        $parents = $node.ParentNode.Name + '.' + $parents
        $node = $node.ParentNode
    }

    return $parents
}

# Loop through each element in the XML
foreach ($element in $xmlContent.SelectNodes("//*")) {
    $property = $element.Name
    $value = $element.InnerText
    $parents = (Get-AllParents $element).TrimEnd('.')

    # Generate a unique key for the property within its hierarchy
    $key = "$parents.$property"

    # Check if the tag has already been processed with the same key
    if (-not $processedTags.ContainsKey($key)) {
        # Check if the tag's value is a concatenation of child values, and skip it if it is
        if (-not (IsConcatenationOfChildValues $element)) {
            # Add the property, parents, and value (even if it's empty) to the flattened data
            $flatData += [PSCustomObject]@{ Parents = $parents; Property = $property; Value = $value }
        }
        $processedTags[$key] = $true
    }
}

# Export the flattened data as a CSV file (or any desired format)
$flatData | Export-Csv -Path "flattened_with_parents_and_no_concatenations.csv" -NoTypeInformation
