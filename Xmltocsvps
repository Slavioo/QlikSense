# Load the XML file
$xmlContent = [xml](Get-Content -Path "your_complex.xml")

# Initialize an empty array to store flattened data
$flatData = @()

# Recursive function to get all parent elements separated by full stops
function Get-AllParents($node) {
    $parents = @()

    while ($node.ParentNode -ne $null) {
        $parents = $node.ParentNode.Name + '.' + $parents
        $node = $node.ParentNode
    }

    return $parents
}

# Loop through each element in the XML
foreach ($element in $xmlContent.SelectNodes("//*")) {
    $property = $element.Name
    $value = $element.InnerText
    $parents = (Get-AllParents $element).TrimEnd('.')
    
    # Generate a unique key for the property within its hierarchy
    $key = "$parents.$property"

    # Create a custom object with Property, Path, and Value columns
    $entry = New-Object -TypeName PSObject
    $entry | Add-Member -MemberType NoteProperty -Name "Property" -Value $property

    # Calculate the correct Path by splitting and joining the parents
    $pathComponents = $parents.Split('.')
    $pathComponents += $property
    $entry | Add-Member -MemberType NoteProperty -Name "Path" -Value ($pathComponents -join '.')

    $entry | Add-Member -MemberType NoteProperty -Name "Value" -Value $value

    # Add the custom object to the flattened data array
    $flatData += $entry
}

# Export the flattened data as a CSV file (or any desired format)
$flatData | Export-Csv -Path "flattened_data_with_correct_path.csv" -NoTypeInformation
