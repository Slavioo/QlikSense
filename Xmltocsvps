# Load the XML file
$xmlContent = [xml](Get-Content -Path "your_complex.xml")

# Initialize an empty array to store flattened data
$flatData = @()

# Hashtable to keep track of processed tags
$processedTags = @{}

# Recursive function to get all parent elements separated by full stops
function Get-AllParents($node) {
    $parents = @()

    while ($node.ParentNode -ne $null) {
        $parents = $node.ParentNode.Name + '.' + $parents
        $node = $node.ParentNode
    }

    return $parents
}

# Loop through each element in the XML
foreach ($element in $xmlContent.SelectNodes("//*")) {
    $property = $element.Name
    $value = $element.InnerText
    $parents = (Get-AllParents $element).TrimEnd('.')

    # Check if the tag has already been processed with the same key
    $key = "$parents.$property"
    if (-not $processedTags.ContainsKey($key)) {
        # Add the property, parents, and value to the flattened data
        $flatData += [PSCustomObject]@{ Parents = $parents; Property = $property; Value = $value }
        $processedTags[$key] = $true
    }
}

# Filter the flatData to exclude records where Property is not equal to the end node property name
$filteredData = $flatData | Where-Object { $_.Property -eq $xmlContent.DocumentElement.Name }

# Export the filtered data as a CSV file (or any desired format)
$filteredData | Export-Csv -Path "filtered_by_property.csv" -NoTypeInformation
