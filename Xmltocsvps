# Load the XML file
$xmlContent = [xml](Get-Content -Path "your_complex.xml")

# Initialize an empty array to store flattened data
$flatData = @()

# Hashtable to keep track of processed tags
$processedTags = @{}

# Function to check if an element is a direct child of the root node
function IsDirectChildOfRoot($element) {
    return ($element.ParentNode -eq $xmlContent.DocumentElement)
}

# Recursive function to get all parent elements separated by full stops
function Get-AllParents($node) {
    $parents = @()

    while ($node.ParentNode -ne $null) {
        $parents = $node.ParentNode.Name + '.' + $parents
        $node = $node.ParentNode
    }

    return $parents
}

# Loop through each element in the XML
foreach ($element in $xmlContent.SelectNodes("//*")) {
    # Skip the element if it's not a direct child of the root node
    if (-not (IsDirectChildOfRoot $element)) {
        continue
    }

    $property = $element.Name
    $value = $element.InnerText
    $parents = (Get-AllParents $element).TrimEnd('.')
    
    # Check if there are no other tags between the tag and the value in the hierarchy
    $hierarchy = $parents.Split('.')
    $validHierarchy = $true
    foreach ($node in $hierarchy) {
        if ($processedTags.ContainsKey("$node.$property")) {
            $validHierarchy = $false
            break
        }
    }

    # Generate a unique key for the property within its hierarchy
    $key = "$parents.$property"

    # Check if the tag has already been processed with the same key and if the hierarchy is valid
    if (-not $processedTags.ContainsKey($key) -and $validHierarchy) {
        # Add the property, parents, and value to the flattened data
        $flatData += [PSCustomObject]@{ Parents = $parents; Property = $property; Value = $value }
        $processedTags[$key] = $true
    }
}

# Export the filtered data as a CSV file (or any desired format)
$flatData | Export-Csv -Path "filtered_by_hierarchy.csv" -NoTypeInformation
