define(["qlik", "jquery", "text!./style.css", "text!./template.html"], function (qlik, $, cssContent, template) {
    'use strict';

    $("<style>").html(cssContent).appendTo("head");

    return {
        template: template,
        initialProperties: {
            qHyperCubeDef: {
                qDimensions: [],
                qMeasures: [],
                qInitialDataFetch: [{
                    qWidth: 50,
                    qHeight: 50
                }]
            }
        },
        definition: {
            type: "items",
            component: "accordion",
            items: {
                dimensions: {
                    uses: "dimensions",
                    min: 1,
                    items: {
                        qCalcConditionDimension: {
                            type: "items",
                            items: {
                                calculation: {
                                    ref: "qCalcCondition.qCond.qv",
                                    type: "string",
                                    expression: "optional",
                                    label: "Condition",
                                }
                            }
                        },
                        customPropertiesDimension: {
                            ref: "qCustomProperties.isHidden",
                            type: "boolean",
                            label: "Hide Column",
                            defaultValue: false
                        }
                    }
                },
                measures: {
                    uses: "measures",
                    min: 0,
                    items: {
                        qCalcConditionMeasure: {
                            type: "items",
                            items: {
                                calculation: {
                                    ref: "qCalcCondition.qCond.qv",
                                    type: "string",
                                    expression: "optional",
                                    label: "Condition",
                                }
                            }
                        },
                        customPropertiesMeasure: {
                            ref: "qCustomProperties.isHidden",
                            type: "boolean",
                            label: "Hide Column",
                            defaultValue: false
                        }
                    }
                },
                sorting: {
                    uses: "sorting"
                },
                settings: {
                    uses: "settings",
                    items: {
                        initFetchRows: {
                            ref: "qHyperCubeDef.qInitialDataFetch.0.qHeight",
                            label: "Initial fetch rows",
                            type: "number",
                            defaultValue: 50
                        },
                        initFetchColumns: {
                            ref: "qHyperCubeDef.qInitialDataFetch.0.qWidth",
                            label: "Initial fetch columns",
                            type: "number",
                            defaultValue: 50
                        }
                    }
                }
            }
        },
        support: {
            snapshot: true,
            export: true,
            exportData: true
        },
        paint: function ($element) {
            var self = this;
            var layout = self.layout;
            var data = layout.qHyperCube.qDataPages[0].qMatrix;

            // Hide columns based on isHidden property
            var hiddenColumns = layout.qHyperCube.qDimensionInfo.concat(layout.qHyperCube.qMeasureInfo)
                .filter(function (column) {
                    return column.qCustomProperties && column.qCustomProperties.isHidden;
                });

            var visibleColumns = layout.qHyperCube.qDimensionInfo.concat(layout.qHyperCube.qMeasureInfo)
                .filter(function (column) {
                    return !column.qCustomProperties || !column.qCustomProperties.isHidden;
                });

            // Update table headers
            var $table = $element.find("table");
            $table.find("thead th").remove();

            visibleColumns.forEach(function (column) {
                $table.find("thead tr").append('<th>' + column.qFallbackTitle + '</th>');
            });

            // Update table rows
            $table.find("tbody tr").each(function () {
                var $row = $(this);
                $row.find("td").remove();

                visibleColumns.forEach(function (column) {
                    var columnValue = data[$row.index()][column.qCol];

                    // Handle formatting or customization of the column value if needed
                    var formattedValue = columnValue.qText;

                    $row.append('<td>' + formattedValue + '</td>');
                });
            });

            // Hide hidden columns
            hiddenColumns.forEach(function (column) {
                var columnIndex = column.qCol;
                $table.find("th:nth-child(" + (columnIndex + 1) + ")").hide();
                $table.find("td:nth-child(" + (columnIndex + 1) + ")").hide();
            });

            return qlik.Promise.resolve();
        },
        controller: ['$scope', function ($scope) {
            // Controller logic if needed
        }]
    };
});
