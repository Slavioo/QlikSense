define(["qlik", "jquery", "text!./style.css", "text!./template.html"], function (qlik, $, cssContent, template) {
    'use strict';

    $("<style>").html(cssContent).appendTo("head");

    return {
        template: template,
        initialProperties: {
            qHyperCubeDef: {
                qDimensions: [],
                qMeasures: [],
                qInitialDataFetch: [{
                    qWidth: 50,
                    qHeight: 50
                }]
            }
        },
        definition: {
            type: "items",
            component: "accordion",
            items: {
                dimensions: {
                    uses: "dimensions",
                    min: 1,
                    items: {
                        qCalcConditionDimension: {
                            type: "items",
                            items: {
                                calculation: {
                                    ref: "qCalcCondition.qCond.qv",
                                    type: "string",
                                    expression: "optional",
                                    label: "Condition",
                                }
                            }
                        },
                        customPropertiesDimension: {
                            ref: "qCustomProperties.isHidden",
                            type: "boolean",
                            label: "Hide Dimension",
                            defaultValue: false
                        }
                    }
                },
                measures: {
                    uses: "measures",
                    min: 0,
                    items: {
                        qCalcConditionMeasure: {
                            type: "items",
                            items: {
                                calculation: {
                                    ref: "qCalcCondition.qCond.qv",
                                    type: "string",
                                    expression: "optional",
                                    label: "Condition",
                                }
                            }
                        },
                        customPropertiesMeasure: {
                            ref: "qCustomProperties.isHidden",
                            type: "boolean",
                            label: "Hide Measure",
                            defaultValue: false
                        }
                    }
                },
                sorting: {
                    uses: "sorting"
                },
                settings: {
                    uses: "settings",
                    items: {
                        initFetchRows: {
                            ref: "qHyperCubeDef.qInitialDataFetch.0.qHeight",
                            label: "Initial fetch rows",
                            type: "number",
                            defaultValue: 50
                        },
                        initFetchColumns: {
                            ref: "qHyperCubeDef.qInitialDataFetch.0.qWidth",
                            label: "Initial fetch columns",
                            type: "number",
                            defaultValue: 50
                        }
                    }
                }
            }
        },
        support: {
            snapshot: true,
            export: true,
            exportData: true
        },
        paint: function ($element) {
            // Check if dimensions are hidden
            var hiddenDimensions = this.backendApi.getDimensionInfos().filter(function (dimInfo) {
                return dimInfo.qCustomProperties && dimInfo.qCustomProperties.isHidden === true;
            });
            
            // Check if measures are hidden
            var hiddenMeasures = this.backendApi.getMeasureInfos().filter(function (measureInfo) {
                return measureInfo.qCustomProperties && measureInfo.qCustomProperties.isHidden === true;
            });
            
            // Get the index of hidden dimensions and measures
            var hiddenDimensionIndexes = hiddenDimensions.map(function (dim) {
                return dim.qIndex;
            });
            
            var hiddenMeasureIndexes = hiddenMeasures.map(function (measure) {
                return measure.qIndex;
            });
            
            // Get the data for the hypercube
            var hypercube = this.backendApi.cacheCube;
            var dataMatrix = hypercube.qDataPages[0].qMatrix;
            
            // Remove hidden dimensions from the data matrix
            dataMatrix = dataMatrix.map(function (row) {
                return row.filter(function (cell, index) {
                    return hiddenDimensionIndexes.indexOf(index) === -1;
                });
            });
            
            // Remove hidden measures from the data matrix
            dataMatrix = dataMatrix.filter(function (row) {
                return row.filter(function (cell, index) {
                    return hiddenMeasureIndexes.indexOf(index) === -1;
                });
            });
            
            // Render the table with the updated data matrix
            var html = "";
            html += '<div qv-extension style="height: 100%; position: relative; overflow: auto;">';
            html += '<table>';
            html += '<thead>';
            html += '<tr>';
            
            // Render table headers
            hypercube.qDimensionInfo.forEach(function (dimInfo, index) {
                if (!dimInfo.qCustomProperties || !dimInfo.qCustomProperties.isHidden) {
                    html += '<th>' + dimInfo.qFallbackTitle + '</th>';
                }
            });
            
            hypercube.qMeasureInfo.forEach(function (measureInfo, index) {
                if (!measureInfo.qCustomProperties || !measureInfo.qCustomProperties.isHidden) {
                    html += '<th>' + measureInfo.qFallbackTitle + '</th>';
                }
            });
            
            html += '</tr>';
            html += '</thead>';
            html += '<tbody>';
            
            // Render table rows
            dataMatrix.forEach(function (row) {
                html += '<tr>';
                
                row.forEach(function (cell) {
                    html += '<td>' + cell.qText + '</td>';
                });
                
                html += '</tr>';
            });
            
            html += '</tbody>';
            html += '</table>';
            html += '</div>';
            
            $element.html(html);
            
            return qlik.Promise.resolve();
        },
        controller: ['$scope', function (/*$scope*/) {
        }]
    };
});

<div qv-extension style="height: 100%; position: relative; overflow: auto;">
    <table>
        <thead>
            <tr>
                <th ng-repeat="head in table.headers track by $index" ng-if="!head.qCustomProperties || !head.qCustomProperties.isHidden" qva-activate="head.orderBy()">{{head.qFallbackTitle}}</th>
            </tr>
        </thead>
        <tbody>
            <tr ng-repeat="row in table.rows track by $index">
                <td ng-repeat="cell in row.cells track by $index" class="selectable" ng-class="{'selected':cell.selected,'numeric':cell.qNum}" ng-if="!cell.qCustomProperties || !cell.qCustomProperties.isHidden" qva-activate="cell.select($event)">{{cell.qText}}</td>
            </tr>
        </tbody>
    </table>
    <button ng-if="table.rowCount > table.rows.length" qva-activate="table.getMoreData()" class="lui-button more">More...</button>
</div>
